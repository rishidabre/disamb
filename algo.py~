#!/usr/bin/python

import logging
import getpass
from py2neo import authenticate, Graph, watch
import codecs

logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

# Set the file paths
#path_authors='/disamb/data/Authors/first100.txt'
#path_paperauthoraffil='/disamb/data/PaperAuthorAffiliations/first1000.txt'
#path_paperreferences='/disamb/data/PaperReferences/firstMillion.txt'

path_authors='/disamb/temp/temp_authors.txt'
path_paperauthoraffil='/disamb/temp/temp_paperauthoraffil.txt'
path_paperreferences='/disamb/temp/temp_paperreferences.txt'

# Set the alpha and beta values
alpha_a=0.54
alpha_s=0.75
alpha_r=0.19
alpha_c=1.02
beta_1=1
beta_2=0.19
beta_3=0.011
beta_4=0.49

# Credentials of Neo4j repository
conn_protocol="http"
surl="neo4j-genbank.syr.edu:7474"
uname="neo4j"
passwd=getpass.getpass()

# Authenticate with the repository
authenticate(surl, uname, passwd)

# Connect to the graph database
neo_graph=Graph(conn_protocol+"://"+surl+"/db/data/")

# Check if the authentication is working by acquiring the cypher resource
cypher_resource=neo_graph.cypher

# Function to compute co-authorship overlap
def compute_coauthorship_overlap(paper1_id, paper2_id):
    paper1_authors=[]
    paper2_authors=[]
    with open(path_paperauthoraffil, 'r') as f_paperauthoraffil:
        paper1_authors=[]
        paper2_authors=[]
        for line in f_paperauthoraffil:
            line_split=line.replace('\n', '').replace('\r','').split()
            paper_id=line_split[0]
            author_id=line_split[1]
            if(paper_id==paper1_id):
                # Author of paper 1
                paper1_authors.append(author_id)
            elif(paper_id==paper2_id):
                # Author of paper 2
                paper2_authors.append(author_id)
    # Find minimum of the number of authors of both papers
    min_authors=min(len(paper1_authors), len(paper2_authors))
    common_authors=0
    # Find the number of common authors
    for author1 in paper1_authors:
        for author2 in paper2_authors:
            if author1==author2:
                common_authors+=1
    result=common_authors/min_authors
    print("Co-authorship score: "+str(result))
    return result

# Function to compite self citation count
def compute_self_citation_count(paper1_id, paper2_id):
    paper1_reference=0
    paper2_reference=1
    with open(path_paperreferences, 'r') as f_paperreferences:
        for line in f_paperreferences:
            line_split=line.replace('\n','').replace('\r','').split()
            paper_id=line_split[0]
            reference_id=line_split[1]
            if (paper_id==paper1_id):
                if (reference_id==paper2_id):
                    paper2_reference=1
            elif (paper_id==paper2_id):
                if (reference_id==paper1_id):
                    paper1_reference=1
            if (paper1_reference==1 and paper2_reference==1):
                break
    result=paper1_reference+paper2_reference
    print("Self citations: "+str(result))
    return result

# Function to compute shared reference count
def compute_shared_reference_count(paper1_id, paper2_id):
    paper1_references=[]
    paper2_references=[]
    common_references=0
    with open(path_paperreferences, 'r') as f_paperreferences:
        for line in f_paperreferences:
            line_split=line.replace('\n','').replace('\r','').split()
            paper_id=line_split[0]
            reference_id=line_split[1]
            if (paper_id==paper1_id):
                paper1_references.append(reference_id)
            elif (paper_id==paper2_id):
                paper2_references.append(reference_id)
    for reference1 in paper1_references:
        for reference2 in paper2_references:
            if (reference1==reference2):
                common_references+=1
    print("Shared reference count: "+str(common_references))
    return common_references

# Function to compute citation overlap
def compute_citation_overlap(paper1_id, paper2_id):
    citation1=[]
    citation2=[]
    with open(path_paperreferences, 'r') as f_paperreferences:
        for line in f_paperreferences:
            line_split=line.replace('\n','').replace('\r','').split()
            paper_id=line_split[0]
            reference_id=line_split[1]
            if (reference_id==paper1_id):
                citation1.append(reference_id)
            elif (reference_id==paper2_id):
                citation2.append(reference_id)
    common_citations=0
    min_citations=min(len(citation1), len(citation2))
    for c1 in citation1:
        for c2 in citation2:
            if (c1==c2):
                common_citations+=1
    result=common_citations/min_citations
    print("Common citations: "+str(result))
    return result

# Function to compute similarity score
def compute_similarity_score(coauthorship_overlap, self_citation_count, shared_reference_count, citation_overlap):
    similarity_score=alpha_a*coauthorship_overlap+alpha_s*self_citation_count+alpha_r*shared_reference_count+alpha_c*citation_overlap
    print("Similarity score: "+str(similarity_score))
    return similarity_score

# Dictionary storing the similarity values of papers
similarity={}
with codecs.open(path_authors, 'r', encoding='utf-8') as f_authors:
    logging.debug('Opened file '+path_authors)
    # For each author from 'Authors.txt'
    for line in f_authors:
        line_split=line.split('\t')
        author_id=line_split[0]
        logging.debug('Working on Author: '+line_split[1])
        with open(path_paperauthoraffil, 'r') as f_paperauthoraffil_1:
            logging.debug('Opened file '+path_paperauthoraffil)
            # For each paper author relationship
            for ppa_line1 in f_paperauthoraffil_1:
                logging.debug('Reading paper author relationship: '+ppa_line1)
                ppa_line1_split=ppa_line1.replace('\r', '').replace('\n', '').split('\t')
                paper1_id=ppa_line1_split[0]
                paper1_author_id=ppa_line1_split[1]
                # Check for the author we are looking for
                if(paper1_author_id!=author_id):
                    continue
                print("First paper match found!")
                with open(path_paperauthoraffil, 'r') as f_paperauthoraffil_2:
                    logging.debug('Opened file '+path_paperauthoraffil)
                    # For each paper author relationship
                    for ppa_line2 in f_paperauthoraffil_2:
                        logging.debug('Reading paper author relationship: '+ppa_line2)
                        # Check if both the lines are the same
                        if(ppa_line2==ppa_line1):
                            continue
                        ppa_line2_split=ppa_line2.replace('\r', '').replace('\n','').split('\t')
                        paper2_id=ppa_line2_split[0]
                        paper2_author_id=ppa_line2_split[1]
                        # Check for the author we are looking for
                        print("Comparing "+paper2_author_id+" and "+author_id)
                        if(paper2_author_id!=author_id):
                            continue
                        print("Second paper match found!")
                        # Check if the similarity is already computed
                        if not similarity.get(paper1_id):
                            logging.debug('Paper ['+paper1_id+'] was not compared with any paper.')
                            # Not computed with any paper
                            similarity.update({paper1_id: {}})
                        simil_papers=similarity.get(paper1_id)
                        if not simil_papers.get(paper2_id):
                            logging.debug('Paper ['+paper1_id+'] was not compared with paper ['+paper2_id+']')
                            # Compute co-authorship overlap
                            coauthorship_overlap=compute_coauthorship_overlap(paper1_id, paper2_id)
                            # Compute self citation count
                            self_citation_count=compute_self_citation_count(paper1_id, paper2_id)
                            # Compute shared reference count
                            shared_reference_count=compute_shared_reference_count(paper1_id, paper2_id)
                            # Compute citation overlap
                            citation_overlap=compute_citation_overlap(paper1_id, paper2_id)
                            # Compute similarity score
                            similarity_score=compute_similarity_score(coauthorship_overlap, self_citation_count, shared_reference_count, citation_overlap)
                            # Update the similarity score
                            simil_papers.update({paper2_id: similarity_score})
                            logging.debug('Updated similarity score for paper ['+paper1_id+'] - paper ['+paper2_id+'] as ['+str(similarity_score)+']')
                            # Check if similarity score is above the threshold
                            if (similarity_score>=beta_1):
                                # Add paper 2 to the cluster of paper 1
                                # The following query finds if a cluster exists for paper 1, creates it if it does not and then adds paper 2 to the cluster of paper 1
                                add_to_cluster_query="MERGE (c:Cluster)<-[:BELONGS_TO]-(p:PaperID{pid: '"+paper1_id+"'}) CREATE (c)<-[:BELONGS_TO]-(p1:PaperID{pid: '"+paper2_id+"'})"
                                ##### qresult=cypher_resource.execute(add_to_cluster_query)
                                logging.info("Added paper ID "+paper2_id+" to the cluster of paper ID "+paper1_id)
                            else:
                                logging.info("Similarity score for paper ID "+paper2_id+" and "+paper1_id+" is "+similarity_score+", less than "+beta_1)
